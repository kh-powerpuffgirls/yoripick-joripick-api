<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="auth">

	<select id="getNotiByUserNo" resultType="userNotiDto">
		SELECT 
			msg_noti AS newMessage,
			reply_noti AS newReply,
			rvw_noti AS newReview,
			exp_noti AS expiration
		FROM USERS
		WHERE user_no = #{userNo}
	</select>

	<resultMap id="UserResult"
		type="com.kh.ypjp.security.model.dto.AuthDto$User" autoMapping="true">
		<id property="userNo" column="USER_NO" />
		<result property="email" column="EMAIL" />
		<result property="username" column="USERNAME" />
		<result property="imageNo" column="IMAGE_NO" />
		<result property="password" column="PASSWORD" />
		<result property="provider" column="PROVIDER" />
		<collection property="roles" ofType="java.lang.String">
			<result column="AUTHORITY" />
		</collection>
	</resultMap>

<select id="findUserByEmail" resultMap="UserResult">
		SELECT
		U.USER_NO, U.EMAIL, U.USERNAME, U.IMAGE_NO, C.PASSWORD,
		A.AUTHORITY,
		I.PROVIDER
		FROM USERS U
		LEFT JOIN CREDENTIAL C ON U.USER_NO = C.USER_NO
		JOIN AUTHORITY A ON U.USER_NO = A.USER_NO
		LEFT JOIN USER_IDENTITIES I ON U.USER_NO = I.USER_ID
		WHERE UPPER(U.EMAIL) = UPPER(#{email})
</select>

	<insert id="insertUser">
		<selectKey keyProperty="userNo" resultType="long" order="BEFORE">
			SELECT SEQ_USER_NO.NEXTVAL FROM DUAL
		</selectKey> INSERT INTO
		USERS (USER_NO, EMAIL, USERNAME, IMAGE_NO, STATUS) VALUES (#{userNo},
		#{email}, #{username}, 0, 'ACTIVE') </insert>

	<insert id="insertUserRole"> INSERT ALL <foreach collection="roles"
			item="role" separator="">
			INTO AUTHORITY (USER_NO, AUTHORITY) VALUES (#{userNo}, #{role})
		</foreach>
		SELECT 1 FROM DUAL </insert>

	<insert id="insertCred">
		INSERT INTO CREDENTIAL (USER_NO, PASSWORD)
		VALUES (#{userNo}, #{password})
	</insert>

	<update id="updatePassword"
		parameterType="com.kh.ypjp.security.model.dto.AuthDto$UserCredential">
		UPDATE CREDENTIAL
		SET PASSWORD = #{password}
		WHERE USER_NO = #{userNo}
	</update>

<select id="findUserByUserNo" resultMap="UserResult">
    SELECT
        U.USER_NO, U.EMAIL, U.USERNAME, U.IMAGE_NO, U.SIK_BTI,
        U.MSG_NOTI, U.REPLY_NOTI, U.RVW_NOTI, U.EXP_NOTI,
        U.STATUS, U.INACTIVE_DATE,
        C.PASSWORD,
        A.AUTHORITY,
        I.PROVIDER 
    FROM USERS U
    LEFT JOIN CREDENTIAL C ON U.USER_NO = C.USER_NO
    JOIN AUTHORITY A ON U.USER_NO = A.USER_NO
    LEFT JOIN USER_IDENTITIES I ON U.USER_NO = I.USER_ID 
    WHERE U.USER_NO = #{userNo}
</select>

<select id="findUserByUsername" parameterType="string" resultMap="UserResult">
    SELECT
        U.USER_NO, U.EMAIL, U.USERNAME, U.IMAGE_NO, U.SIK_BTI,
        U.MSG_NOTI, U.REPLY_NOTI, U.RVW_NOTI, U.EXP_NOTI,
        U.STATUS, U.INACTIVE_DATE,
        C.PASSWORD,
        A.AUTHORITY,
        I.PROVIDER
    FROM USERS U
    LEFT JOIN CREDENTIAL C ON U.USER_NO = C.USER_NO
    JOIN AUTHORITY A ON U.USER_NO = A.USER_NO
    LEFT JOIN USER_IDENTITIES I ON U.USER_NO = I.USER_ID
    WHERE UPPER(U.USERNAME) = UPPER(#{username})
</select>

	<insert id="insertUserIdentities">
		INSERT INTO USER_IDENTITIES (
		SOCIAL_LOGIN_ID, USER_ID, ACCESS_TOKEN,
		PROVIDER, PROVIDER_USER_ID
		)
		VALUES (
		SEQ_USER_IDENTITIES_ID.NEXTVAL, #{userNo}, #{accessToken},
		#{provider}, #{providerUserId}
		)
	</insert>
	<update id="updateUserIdentities">
		UPDATE USER_IDENTITIES SET ACCESS_TOKEN = #{accessToken}
		WHERE PROVIDER = #{provider} AND PROVIDER_USER_ID = #{providerUserId}
	</update>

	<select id="getKakaoAccessToken" resultType="string">
		SELECT ACCESS_TOKEN FROM USER_IDENTITIES WHERE USER_ID = #{userNo}
	</select>

	<resultMap id="AuthorityResult"
		type="com.kh.ypjp.security.model.dto.AuthDto$Authority"
		autoMapping="true">
		<id property="userNo" column="USER_NO" />
		<collection property="roles" ofType="java.lang.String">
			<result column="AUTHORITY" />
		</collection>
	</resultMap>

</mapper>