<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.kh.ypjp.community.free.dao.FreeDao">

    <!-- ===================== DTO 매핑 ===================== -->

    <!-- FreeDto 매핑 -->
    <resultMap id="freeResultMap" type="FreeDto">
        <result property="boardNo" column="boardNo" />
        <result property="userNo" column="userNo" />
        <result property="subheading" column="subheading" />
        <result property="title" column="title" />
        <result property="content" column="content" />
        <result property="createdDate" column="createdDate" />
        <result property="views" column="views" />
        <result property="likes" column="likes" />
        <result property="replyCount" column="replyCount" />
        <result property="originName" column="originName" />
        <result property="serverName" column="serverName" />
        <result property="username" column="username" />
        <result property="sik_bti" column="sik_bti" />
    </resultMap>

    <!-- ReplyDto 매핑 -->
    <resultMap id="replyResultMap" type="ReplyDto">
        <result property="replyNo" column="replyNo" />
        <result property="refNo" column="refNo" />
        <result property="userNo" column="userNo" />
        <result property="content" column="content" />
        <result property="createdAt" column="createdAt" />
        <result property="username" column="username" />
        <result property="sik_bti" column="sik_bti" />
        <result property="profileImageServerName" column="profileImageServerName" />
        <result property="category" column="category" />
    </resultMap>


    <!-- ===================== 게시글 조회 ===================== -->

    <!-- 전체 게시글 조회 -->
	<select id="selectAllBoards" resultMap="freeResultMap">
	    SELECT
	        b.board_no AS boardNo,
	        b.user_no AS userNo,
	        b.title,
	        b.subheading,
	        b.created_at AS createdDate,
	        b.views,
	        U.username,
	        U.sik_bti,
	        (SELECT COUNT(*) FROM LIKES l WHERE l.ref_no = b.board_no AND l.ref_type = 'BOARD') AS likes,
	        (SELECT COUNT(*) FROM REPLY START WITH ref_no = b.board_no AND category = 'BOARD' CONNECT BY PRIOR reply_no = ref_no) AS replyCount,
	        i.server_name AS serverName
	    FROM BOARD b
	    JOIN USERS U ON b.user_no = U.user_no
	    LEFT JOIN IMAGE i ON b.image_no = i.image_no
	    WHERE b.delete_status = 'N'
	    ORDER BY b.board_no DESC
	</select>
	
    <!-- 특정 사용자의 sik_bti 조회 -->
    <select id="selectSikBtiByUserNo" parameterType="int" resultType="String">
        SELECT sik_bti
        FROM USERS
        WHERE user_no = #{userNo}
    </select>

    <!-- 특정 게시글 조회 -->
    <select id="selectBoardByNo" resultMap="freeResultMap">
        SELECT
            b.board_no AS boardNo,
            b.user_no AS userNo,
            b.subheading,
            b.title,
            b.content,
            b.created_at AS createdDate,
            b.views,
            U.username,
            U.sik_bti,
            (SELECT COUNT(*) FROM LIKES l WHERE l.ref_no = b.board_no AND l.ref_type = 'BOARD') AS likes,
            (SELECT COUNT(*) FROM REPLY START WITH ref_no = b.board_no AND category = 'BOARD' CONNECT BY PRIOR reply_no = ref_no) AS replyCount,
            i.origin_name AS originName,
            i.server_name AS serverName
        FROM BOARD b
        JOIN USERS U ON b.user_no = U.user_no
        LEFT JOIN IMAGE i ON b.image_no = i.image_no
        WHERE b.board_no = #{boardNo}
    </select>


    <!-- ===================== 게시글 등록/수정 ===================== -->

    <!-- 게시글 등록 -->
    <insert id="insertBoard" keyProperty="boardNo">
        <selectKey keyProperty="boardNo" resultType="int" order="BEFORE">
            SELECT SEQ_BOARD_NO.NEXTVAL FROM DUAL
        </selectKey>
        INSERT INTO BOARD (board_no, user_no, title, subheading, content)
        VALUES (#{boardNo}, #{userNo}, #{title}, #{subheading}, #{content})
    </insert>

    <!-- 이미지 등록 -->
    <insert id="insertImage" parameterType="map">
        <selectKey keyProperty="imageNo" resultType="int" order="BEFORE">
            SELECT SEQ_IMAGE_NO.NEXTVAL FROM DUAL
        </selectKey>
        INSERT INTO IMAGE (image_no, origin_name, server_name)
        VALUES (#{imageNo}, #{originName}, #{serverName})
    </insert>

    <!-- 게시글 이미지 업데이트 -->
    <update id="updateBoardImageNo">
        UPDATE BOARD
        SET image_no = #{imageNo}
        WHERE board_no = #{boardNo}
    </update>

    <!-- 게시글 내용 수정 -->
    <update id="updateBoard">
        UPDATE BOARD
        SET title = #{title}, content = #{content}, subheading = #{subheading}
        WHERE board_no = #{boardNo}
    </update>

    <!-- 게시글 삭제(상태 변경) -->
    <update id="updateBoardDeleteStatus">
        UPDATE BOARD
        SET delete_status = #{deleteStatus}
        WHERE board_no = #{boardNo}
    </update>


    <!-- ===================== 조회수/좋아요 ===================== -->

	<delete id="deleteImageByImageNo" parameterType="int">
        DELETE FROM IMAGE WHERE image_no = #{imageNo}
    </delete>

    <update id="incrementViews">
        UPDATE BOARD SET views = views + 1 WHERE board_no = #{boardNo}
    </update>

    <!-- 좋아요 / 싫어요 반영 -->
	<select id="checkIfLiked" resultType="int">
	    SELECT COUNT(*)
	    FROM LIKES
	    WHERE USER_NO = #{userNo} 
	      AND REF_TYPE = 'BOARD' 
	      AND REF_NO = #{boardNo}
	</select>
	
	    <update id="insertOrUpdateLike">
	    MERGE INTO LIKES l
	    USING (SELECT #{userNo} AS user_no, #{boardNo} AS ref_no, 'BOARD' AS ref_type FROM dual) t
	    ON (l.user_no = t.user_no AND l.ref_no = t.ref_no AND l.ref_type = t.ref_type)
	    WHEN MATCHED THEN
	        UPDATE SET l.LIKE_STATUS = #{likeStatus}, l.LIKED_AT = SYSDATE
	    WHEN NOT MATCHED THEN
	        INSERT (USER_NO, REF_TYPE, REF_NO, LIKE_STATUS, LIKED_AT)
	        VALUES (#{userNo}, 'BOARD', #{boardNo}, #{likeStatus}, SYSDATE)
	</update>
	
	<!-- 좋아요/싫어요 취소 -->
	<update id="deleteLike">
	    UPDATE LIKES
	    SET LIKE_STATUS = 'COMMON', LIKED_AT = SYSDATE
	    WHERE USER_NO = #{userNo} 
	      AND REF_TYPE = 'BOARD' 
	      AND REF_NO = #{boardNo}
	</update>

	<!-- 게시글 좋아요 개수 조회 -->
	<select id="getLikesCount" resultType="int">
	    SELECT COUNT(*)
	    FROM LIKES
	    WHERE REF_TYPE = 'BOARD' AND REF_NO = #{boardNo} AND LIKE_STATUS = 'LIKE'
	</select>
	
	<select id="findLikeStatus" resultType="string">
    SELECT LIKE_STATUS
    FROM LIKES
    WHERE USER_NO = #{userNo} 
      AND REF_TYPE = 'BOARD' 
      AND REF_NO = #{boardNo}
</select>

	
    <!-- ===================== 댓글(Reply) 관련 ===================== -->

    <!-- 특정 댓글 조회 -->
    <select id="selectReplyById" resultType="com.kh.ypjp.community.free.dto.ReplyDto">
        SELECT reply_no, ref_no, user_no, content, created_at, category
        FROM REPLY
        WHERE reply_no = #{replyNo}
    </select>

    <!-- 게시글 댓글 전체 조회 -->
    <select id="selectAllRepliesByBoardNo" resultMap="replyResultMap">
        SELECT
            R.reply_no AS replyNo,
            R.ref_no AS refNo,
            R.user_no AS userNo,
            R.content,
            R.created_at AS createdAt,
            R.category AS category,
            U.username,
            U.sik_bti,
            I.server_name AS profileImageServerName
        FROM REPLY R
        JOIN USERS U ON R.user_no = U.user_no
        LEFT JOIN IMAGE I ON U.image_no = I.image_no
        START WITH R.category = 'BOARD' AND R.ref_no = #{boardNo}
        CONNECT BY NOCYCLE PRIOR R.reply_no = R.ref_no
        ORDER SIBLINGS BY R.created_at ASC
    </select>

    <!-- 게시글 이미지 번호 조회 -->
    <select id="selectImageNoByBoardNo" parameterType="int" resultType="int">
        SELECT image_no FROM BOARD WHERE board_no = #{boardNo}
    </select>

    <!-- 댓글 등록 -->
    <insert id="insertReply" parameterType="com.kh.ypjp.community.free.dto.ReplyDto">
        INSERT INTO REPLY (REPLY_NO, CATEGORY, REF_NO, USER_NO, CONTENT, CREATED_AT)
        VALUES (
            SEQ_REPLY_NO.NEXTVAL,
            #{category},
            #{refNo},
            #{userNo},
            #{content},
            SYSDATE
        )
    </insert>

    <!-- 댓글 수정 -->
    <update id="updateReply">
        UPDATE REPLY
        SET content = #{content}
        WHERE reply_no = #{replyNo}
    </update>

    <!-- 댓글 삭제 -->
    <delete id="deleteReply" parameterType="long">
        DELETE FROM REPLY
        WHERE reply_no = #{replyNo} OR ref_no = #{replyNo}
    </delete>

    <!-- 순환 참조 체크 -->
    <select id="checkCircularReference" resultType="int">
        SELECT COUNT(*)
        FROM REPLY
        START WITH reply_no = #{replyNo}
        CONNECT BY NOCYCLE PRIOR ref_no = reply_no
    </select>


    <!-- ===================== 조회 기록 ===================== -->

    <!-- 사용자가 게시글 조회했는지 체크 -->
    <select id="checkUserViewed" resultType="int">
        SELECT COUNT(*) FROM VIEWS_LOG WHERE board_no = #{boardNo} AND user_no = #{userNo}
    </select>

    <!-- 조회 기록 추가 -->
    <insert id="insertViewLog">
        INSERT INTO VIEWS_LOG (view_no, board_no, user_no, created_at)
        VALUES (SEQ_VIEW_NO.NEXTVAL, #{boardNo}, #{userNo}, SYSDATE)
    </insert>

</mapper>
